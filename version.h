/*
 * @file version.h
 * @brief mkverobj API
 *
 * This file and accompanying source code originated from <https://github.com/aremmell/mkverobj/>.
 * If you obtained it elsewhere, all bets are off.
 *
 * @author Ryan M. Lederman <lederman@gmail.com>
 * @copyright
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2018 Ryan M. Lederman
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef _MKVEROBJ_VERSION_H_INCLUDED
#define _MKVEROBJ_VERSION_H_INCLUDED

#include <stdint.h>
#include <stddef.h>

#if defined(__cplusplus)
# define MKVEROBJ_EXTERNAL extern "C"
#else
# define MKVEROBJ_EXTERNAL extern
#endif

#if defined(__APPLE__) && defined(__clang__) // lld adds underscores
# define MKVEROBJ_VAR version_data
#else
# define MKVEROBJ_VAR _version_data
#endif

MKVEROBJ_EXTERNAL uintptr_t MKVEROBJ_VAR;

/** The size, in mkvo_chars of the ::versionresource.notes buffer. */
#define mkverobj_max_notes 256

/**
 * @struct version_resource
 * 
 * Contains the embedded version information to be accessed
 * at runtime by way of the functions exported in this header.
 */
typedef struct {
    uint16_t major;  /**<! Major version number */
    uint16_t minor;  /**<! Minor version number */
    uint16_t build;  /**<! Build/patch/revision version number */

    /**
     * A buffer of ::mkverobj_max_notes chars in size to be used however
     * the implementor sees fit. This is intended to store one or more
     * null-terminated strings containing information such as:
     * 
     * - build date/time
     * - architecture
     * - commit hash
     * - copyright
     * - miscellenous notes
     * 
     * However, it is not limited to these use cases. The implementor could just
     * as easily store arbirtrary binary data here.
     */
    char notes[mkverobj_max_notes];
} version_resource;

#if defined(__cplusplus)
    extern "C" {
#endif

/**
 * Returns a pointer to the version resource struct embedded in the linker
 * input object file generated by mkverobj.
 */
static inline const version_resource* get_version_resource(void)
{
    return (version_resource*)&MKVEROBJ_VAR;
}

/** 
 * Returns the major version number in the version resource struct.
 */
static inline uint16_t get_version_major(void)
{
    return get_version_resource()->major;
}

/** 
 * Returns the minor version number in the version resource struct.
 */
static inline uint16_t get_version_minor(void)
{
    return get_version_resource()->minor;
}

/** 
 * Returns the build/patch/revision version number in the version resource struct.
 */
static inline uint16_t get_version_build(void)
{
    return get_version_resource()->build;
}

/** 
 * Returns a pointer to the notes buffer in the version resource struct.
 */
static inline const char* get_version_notes(void)
{
    return get_version_resource()->notes;
}

#if defined(__cplusplus)
    }
#endif

#endif /* !_MKVEROBJ_VERSION_H_INCLUDED */
